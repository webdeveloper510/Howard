import "./chunk-S5KM4IGW.js";

// node_modules/@googlemaps/markerclustererplus/dist/index.esm.js
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2)
      if (b2.hasOwnProperty(p))
        d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function extend(type1, type2) {
  for (var property in type2.prototype) {
    type1.prototype[property] = type2.prototype[property];
  }
}
var OverlayViewSafe = function() {
  function OverlayViewSafe2() {
    extend(OverlayViewSafe2, google.maps.OverlayView);
  }
  return OverlayViewSafe2;
}();
function toCssText(styles) {
  return Object.keys(styles).reduce(function(acc, key) {
    if (styles[key]) {
      acc.push(key + ":" + styles[key]);
    }
    return acc;
  }, []).join(";");
}
function coercePixels(pixels) {
  return pixels ? pixels + "px" : void 0;
}
var ClusterIcon = function(_super) {
  __extends(ClusterIcon2, _super);
  function ClusterIcon2(cluster_, styles_) {
    var _this = _super.call(this) || this;
    _this.cluster_ = cluster_;
    _this.styles_ = styles_;
    _this.center_ = null;
    _this.div_ = null;
    _this.sums_ = null;
    _this.visible_ = false;
    _this.style = null;
    _this.setMap(cluster_.getMap());
    return _this;
  }
  ClusterIcon2.prototype.onAdd = function() {
    var _this = this;
    var cMouseDownInCluster;
    var cDraggingMapByCluster;
    var mc = this.cluster_.getMarkerClusterer();
    var _a = google.maps.version.split("."), major = _a[0], minor = _a[1];
    var gmVersion = parseInt(major, 10) * 100 + parseInt(minor, 10);
    this.div_ = document.createElement("div");
    if (this.visible_) {
      this.show();
    }
    this.getPanes().overlayMouseTarget.appendChild(this.div_);
    this.boundsChangedListener_ = google.maps.event.addListener(this.getMap(), "bounds_changed", function() {
      cDraggingMapByCluster = cMouseDownInCluster;
    });
    google.maps.event.addDomListener(this.div_, "mousedown", function() {
      cMouseDownInCluster = true;
      cDraggingMapByCluster = false;
    });
    google.maps.event.addDomListener(this.div_, "contextmenu", function() {
      google.maps.event.trigger(mc, "contextmenu", _this.cluster_);
    });
    if (gmVersion >= 332) {
      google.maps.event.addDomListener(this.div_, "touchstart", function(e) {
        e.stopPropagation();
      });
    }
    google.maps.event.addDomListener(this.div_, "click", function(e) {
      cMouseDownInCluster = false;
      if (!cDraggingMapByCluster) {
        google.maps.event.trigger(mc, "click", _this.cluster_);
        google.maps.event.trigger(mc, "clusterclick", _this.cluster_);
        if (mc.getZoomOnClick()) {
          var mz_1 = mc.getMaxZoom();
          var theBounds_1 = _this.cluster_.getBounds();
          mc.getMap().fitBounds(theBounds_1);
          setTimeout(function() {
            mc.getMap().fitBounds(theBounds_1);
            if (mz_1 !== null && mc.getMap().getZoom() > mz_1) {
              mc.getMap().setZoom(mz_1 + 1);
            }
          }, 100);
        }
        e.cancelBubble = true;
        if (e.stopPropagation) {
          e.stopPropagation();
        }
      }
    });
    google.maps.event.addDomListener(this.div_, "mouseover", function() {
      google.maps.event.trigger(mc, "mouseover", _this.cluster_);
    });
    google.maps.event.addDomListener(this.div_, "mouseout", function() {
      google.maps.event.trigger(mc, "mouseout", _this.cluster_);
    });
  };
  ClusterIcon2.prototype.onRemove = function() {
    if (this.div_ && this.div_.parentNode) {
      this.hide();
      google.maps.event.removeListener(this.boundsChangedListener_);
      google.maps.event.clearInstanceListeners(this.div_);
      this.div_.parentNode.removeChild(this.div_);
      this.div_ = null;
    }
  };
  ClusterIcon2.prototype.draw = function() {
    if (this.visible_) {
      var pos = this.getPosFromLatLng_(this.center_);
      this.div_.style.top = pos.y + "px";
      this.div_.style.left = pos.x + "px";
    }
  };
  ClusterIcon2.prototype.hide = function() {
    if (this.div_) {
      this.div_.style.display = "none";
    }
    this.visible_ = false;
  };
  ClusterIcon2.prototype.show = function() {
    if (this.div_) {
      this.div_.className = this.className_;
      this.div_.style.cssText = this.createCss_(this.getPosFromLatLng_(this.center_));
      this.div_.innerHTML = (this.style.url ? this.getImageElementHtml() : "") + this.getLabelDivHtml();
      if (typeof this.sums_.title === "undefined" || this.sums_.title === "") {
        this.div_.title = this.cluster_.getMarkerClusterer().getTitle();
      } else {
        this.div_.title = this.sums_.title;
      }
      this.div_.style.display = "";
    }
    this.visible_ = true;
  };
  ClusterIcon2.prototype.getLabelDivHtml = function() {
    var mc = this.cluster_.getMarkerClusterer();
    var ariaLabel = mc.ariaLabelFn(this.sums_.text);
    var divStyle = {
      position: "absolute",
      top: coercePixels(this.anchorText_[0]),
      left: coercePixels(this.anchorText_[1]),
      color: this.style.textColor,
      "font-size": coercePixels(this.style.textSize),
      "font-family": this.style.fontFamily,
      "font-weight": this.style.fontWeight,
      "font-style": this.style.fontStyle,
      "text-decoration": this.style.textDecoration,
      "text-align": "center",
      width: coercePixels(this.style.width),
      "line-height": coercePixels(this.style.textLineHeight)
    };
    return '\n<div aria-label="'.concat(ariaLabel, '" style="').concat(toCssText(divStyle), '" tabindex="0">\n  <span aria-hidden="true">').concat(this.sums_.text, "</span>\n</div>\n");
  };
  ClusterIcon2.prototype.getImageElementHtml = function() {
    var bp = (this.style.backgroundPosition || "0 0").split(" ");
    var spriteH = parseInt(bp[0].replace(/^\s+|\s+$/g, ""), 10);
    var spriteV = parseInt(bp[1].replace(/^\s+|\s+$/g, ""), 10);
    var dimensions = {};
    if (this.cluster_.getMarkerClusterer().getEnableRetinaIcons()) {
      dimensions = {
        width: coercePixels(this.style.width),
        height: coercePixels(this.style.height)
      };
    } else {
      var _a = [
        -1 * spriteV,
        -1 * spriteH + this.style.width,
        -1 * spriteV + this.style.height,
        -1 * spriteH
      ], Y1 = _a[0], X1 = _a[1], Y2 = _a[2], X2 = _a[3];
      dimensions = {
        clip: "rect(".concat(Y1, "px, ").concat(X1, "px, ").concat(Y2, "px, ").concat(X2, "px)")
      };
    }
    var overrideDimensionsDynamicIcon = this.sums_.url ? { width: "100%", height: "100%" } : {};
    var cssText = toCssText(__assign(__assign({ position: "absolute", top: coercePixels(spriteV), left: coercePixels(spriteH) }, dimensions), overrideDimensionsDynamicIcon));
    return '<img alt="'.concat(this.sums_.text, '" aria-hidden="true" src="').concat(this.style.url, '" style="').concat(cssText, '"/>');
  };
  ClusterIcon2.prototype.useStyle = function(sums) {
    this.sums_ = sums;
    var index = Math.max(0, sums.index - 1);
    index = Math.min(this.styles_.length - 1, index);
    this.style = this.sums_.url ? __assign(__assign({}, this.styles_[index]), { url: this.sums_.url }) : this.styles_[index];
    this.anchorText_ = this.style.anchorText || [0, 0];
    this.anchorIcon_ = this.style.anchorIcon || [
      Math.floor(this.style.height / 2),
      Math.floor(this.style.width / 2)
    ];
    this.className_ = this.cluster_.getMarkerClusterer().getClusterClass() + " " + (this.style.className || "cluster-" + index);
  };
  ClusterIcon2.prototype.setCenter = function(center) {
    this.center_ = center;
  };
  ClusterIcon2.prototype.createCss_ = function(pos) {
    return toCssText({
      "z-index": "".concat(this.cluster_.getMarkerClusterer().getZIndex()),
      top: coercePixels(pos.y),
      left: coercePixels(pos.x),
      width: coercePixels(this.style.width),
      height: coercePixels(this.style.height),
      cursor: "pointer",
      position: "absolute",
      "-webkit-user-select": "none",
      "-khtml-user-select": "none",
      "-moz-user-select": "none",
      "-o-user-select": "none",
      "user-select": "none"
    });
  };
  ClusterIcon2.prototype.getPosFromLatLng_ = function(latlng) {
    var pos = this.getProjection().fromLatLngToDivPixel(latlng);
    pos.x = Math.floor(pos.x - this.anchorIcon_[1]);
    pos.y = Math.floor(pos.y - this.anchorIcon_[0]);
    return pos;
  };
  return ClusterIcon2;
}(OverlayViewSafe);
var Cluster = function() {
  function Cluster2(markerClusterer_) {
    this.markerClusterer_ = markerClusterer_;
    this.map_ = this.markerClusterer_.getMap();
    this.minClusterSize_ = this.markerClusterer_.getMinimumClusterSize();
    this.averageCenter_ = this.markerClusterer_.getAverageCenter();
    this.markers_ = [];
    this.center_ = null;
    this.bounds_ = null;
    this.clusterIcon_ = new ClusterIcon(this, this.markerClusterer_.getStyles());
  }
  Cluster2.prototype.getSize = function() {
    return this.markers_.length;
  };
  Cluster2.prototype.getMarkers = function() {
    return this.markers_;
  };
  Cluster2.prototype.getCenter = function() {
    return this.center_;
  };
  Cluster2.prototype.getMap = function() {
    return this.map_;
  };
  Cluster2.prototype.getMarkerClusterer = function() {
    return this.markerClusterer_;
  };
  Cluster2.prototype.getBounds = function() {
    var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
    var markers = this.getMarkers();
    for (var i = 0; i < markers.length; i++) {
      bounds.extend(markers[i].getPosition());
    }
    return bounds;
  };
  Cluster2.prototype.remove = function() {
    this.clusterIcon_.setMap(null);
    this.markers_ = [];
    delete this.markers_;
  };
  Cluster2.prototype.addMarker = function(marker) {
    if (this.isMarkerAlreadyAdded_(marker)) {
      return false;
    }
    if (!this.center_) {
      this.center_ = marker.getPosition();
      this.calculateBounds_();
    } else {
      if (this.averageCenter_) {
        var l = this.markers_.length + 1;
        var lat = (this.center_.lat() * (l - 1) + marker.getPosition().lat()) / l;
        var lng = (this.center_.lng() * (l - 1) + marker.getPosition().lng()) / l;
        this.center_ = new google.maps.LatLng(lat, lng);
        this.calculateBounds_();
      }
    }
    marker.isAdded = true;
    this.markers_.push(marker);
    var mCount = this.markers_.length;
    var mz = this.markerClusterer_.getMaxZoom();
    if (mz !== null && this.map_.getZoom() > mz) {
      if (marker.getMap() !== this.map_) {
        marker.setMap(this.map_);
      }
    } else if (mCount < this.minClusterSize_) {
      if (marker.getMap() !== this.map_) {
        marker.setMap(this.map_);
      }
    } else if (mCount === this.minClusterSize_) {
      for (var i = 0; i < mCount; i++) {
        this.markers_[i].setMap(null);
      }
    } else {
      marker.setMap(null);
    }
    return true;
  };
  Cluster2.prototype.isMarkerInClusterBounds = function(marker) {
    return this.bounds_.contains(marker.getPosition());
  };
  Cluster2.prototype.calculateBounds_ = function() {
    var bounds = new google.maps.LatLngBounds(this.center_, this.center_);
    this.bounds_ = this.markerClusterer_.getExtendedBounds(bounds);
  };
  Cluster2.prototype.updateIcon = function() {
    var mCount = this.markers_.length;
    var mz = this.markerClusterer_.getMaxZoom();
    if (mz !== null && this.map_.getZoom() > mz) {
      this.clusterIcon_.hide();
      return;
    }
    if (mCount < this.minClusterSize_) {
      this.clusterIcon_.hide();
      return;
    }
    var numStyles = this.markerClusterer_.getStyles().length;
    var sums = this.markerClusterer_.getCalculator()(this.markers_, numStyles);
    this.clusterIcon_.setCenter(this.center_);
    this.clusterIcon_.useStyle(sums);
    this.clusterIcon_.show();
  };
  Cluster2.prototype.isMarkerAlreadyAdded_ = function(marker) {
    if (this.markers_.indexOf) {
      return this.markers_.indexOf(marker) !== -1;
    } else {
      for (var i = 0; i < this.markers_.length; i++) {
        if (marker === this.markers_[i]) {
          return true;
        }
      }
    }
    return false;
  };
  return Cluster2;
}();
var getOption = function(options, prop, def) {
  if (options[prop] !== void 0) {
    return options[prop];
  } else {
    return def;
  }
};
var MarkerClusterer = function(_super) {
  __extends(MarkerClusterer2, _super);
  function MarkerClusterer2(map, markers, options) {
    if (markers === void 0) {
      markers = [];
    }
    if (options === void 0) {
      options = {};
    }
    var _this = _super.call(this) || this;
    _this.options = options;
    _this.markers_ = [];
    _this.clusters_ = [];
    _this.listeners_ = [];
    _this.activeMap_ = null;
    _this.ready_ = false;
    _this.ariaLabelFn = _this.options.ariaLabelFn || function() {
      return "";
    };
    _this.zIndex_ = _this.options.zIndex || Number(google.maps.Marker.MAX_ZINDEX) + 1;
    _this.gridSize_ = _this.options.gridSize || 60;
    _this.minClusterSize_ = _this.options.minimumClusterSize || 2;
    _this.maxZoom_ = _this.options.maxZoom || null;
    _this.styles_ = _this.options.styles || [];
    _this.title_ = _this.options.title || "";
    _this.zoomOnClick_ = getOption(_this.options, "zoomOnClick", true);
    _this.averageCenter_ = getOption(_this.options, "averageCenter", false);
    _this.ignoreHidden_ = getOption(_this.options, "ignoreHidden", false);
    _this.enableRetinaIcons_ = getOption(_this.options, "enableRetinaIcons", false);
    _this.imagePath_ = _this.options.imagePath || MarkerClusterer2.IMAGE_PATH;
    _this.imageExtension_ = _this.options.imageExtension || MarkerClusterer2.IMAGE_EXTENSION;
    _this.imageSizes_ = _this.options.imageSizes || MarkerClusterer2.IMAGE_SIZES;
    _this.calculator_ = _this.options.calculator || MarkerClusterer2.CALCULATOR;
    _this.batchSize_ = _this.options.batchSize || MarkerClusterer2.BATCH_SIZE;
    _this.batchSizeIE_ = _this.options.batchSizeIE || MarkerClusterer2.BATCH_SIZE_IE;
    _this.clusterClass_ = _this.options.clusterClass || "cluster";
    if (navigator.userAgent.toLowerCase().indexOf("msie") !== -1) {
      _this.batchSize_ = _this.batchSizeIE_;
    }
    _this.setupStyles_();
    _this.addMarkers(markers, true);
    _this.setMap(map);
    return _this;
  }
  MarkerClusterer2.prototype.onAdd = function() {
    var _this = this;
    this.activeMap_ = this.getMap();
    this.ready_ = true;
    this.repaint();
    this.prevZoom_ = this.getMap().getZoom();
    this.listeners_ = [
      google.maps.event.addListener(this.getMap(), "zoom_changed", function() {
        var map = _this.getMap();
        var minZoom = map.minZoom || 0;
        var maxZoom = Math.min(map.maxZoom || 100, map.mapTypes[map.getMapTypeId()].maxZoom);
        var zoom = Math.min(Math.max(_this.getMap().getZoom(), minZoom), maxZoom);
        if (_this.prevZoom_ != zoom) {
          _this.prevZoom_ = zoom;
          _this.resetViewport_(false);
        }
      }),
      google.maps.event.addListener(this.getMap(), "idle", function() {
        _this.redraw_();
      })
    ];
  };
  MarkerClusterer2.prototype.onRemove = function() {
    for (var i = 0; i < this.markers_.length; i++) {
      if (this.markers_[i].getMap() !== this.activeMap_) {
        this.markers_[i].setMap(this.activeMap_);
      }
    }
    for (var i = 0; i < this.clusters_.length; i++) {
      this.clusters_[i].remove();
    }
    this.clusters_ = [];
    for (var i = 0; i < this.listeners_.length; i++) {
      google.maps.event.removeListener(this.listeners_[i]);
    }
    this.listeners_ = [];
    this.activeMap_ = null;
    this.ready_ = false;
  };
  MarkerClusterer2.prototype.draw = function() {
  };
  MarkerClusterer2.prototype.setupStyles_ = function() {
    if (this.styles_.length > 0) {
      return;
    }
    for (var i = 0; i < this.imageSizes_.length; i++) {
      var size = this.imageSizes_[i];
      this.styles_.push(MarkerClusterer2.withDefaultStyle({
        url: this.imagePath_ + (i + 1) + "." + this.imageExtension_,
        height: size,
        width: size
      }));
    }
  };
  MarkerClusterer2.prototype.fitMapToMarkers = function(padding) {
    var markers = this.getMarkers();
    var bounds = new google.maps.LatLngBounds();
    for (var i = 0; i < markers.length; i++) {
      if (markers[i].getVisible() || !this.getIgnoreHidden()) {
        bounds.extend(markers[i].getPosition());
      }
    }
    this.getMap().fitBounds(bounds, padding);
  };
  MarkerClusterer2.prototype.getGridSize = function() {
    return this.gridSize_;
  };
  MarkerClusterer2.prototype.setGridSize = function(gridSize) {
    this.gridSize_ = gridSize;
  };
  MarkerClusterer2.prototype.getMinimumClusterSize = function() {
    return this.minClusterSize_;
  };
  MarkerClusterer2.prototype.setMinimumClusterSize = function(minimumClusterSize) {
    this.minClusterSize_ = minimumClusterSize;
  };
  MarkerClusterer2.prototype.getMaxZoom = function() {
    return this.maxZoom_;
  };
  MarkerClusterer2.prototype.setMaxZoom = function(maxZoom) {
    this.maxZoom_ = maxZoom;
  };
  MarkerClusterer2.prototype.getZIndex = function() {
    return this.zIndex_;
  };
  MarkerClusterer2.prototype.setZIndex = function(zIndex) {
    this.zIndex_ = zIndex;
  };
  MarkerClusterer2.prototype.getStyles = function() {
    return this.styles_;
  };
  MarkerClusterer2.prototype.setStyles = function(styles) {
    this.styles_ = styles;
  };
  MarkerClusterer2.prototype.getTitle = function() {
    return this.title_;
  };
  MarkerClusterer2.prototype.setTitle = function(title) {
    this.title_ = title;
  };
  MarkerClusterer2.prototype.getZoomOnClick = function() {
    return this.zoomOnClick_;
  };
  MarkerClusterer2.prototype.setZoomOnClick = function(zoomOnClick) {
    this.zoomOnClick_ = zoomOnClick;
  };
  MarkerClusterer2.prototype.getAverageCenter = function() {
    return this.averageCenter_;
  };
  MarkerClusterer2.prototype.setAverageCenter = function(averageCenter) {
    this.averageCenter_ = averageCenter;
  };
  MarkerClusterer2.prototype.getIgnoreHidden = function() {
    return this.ignoreHidden_;
  };
  MarkerClusterer2.prototype.setIgnoreHidden = function(ignoreHidden) {
    this.ignoreHidden_ = ignoreHidden;
  };
  MarkerClusterer2.prototype.getEnableRetinaIcons = function() {
    return this.enableRetinaIcons_;
  };
  MarkerClusterer2.prototype.setEnableRetinaIcons = function(enableRetinaIcons) {
    this.enableRetinaIcons_ = enableRetinaIcons;
  };
  MarkerClusterer2.prototype.getImageExtension = function() {
    return this.imageExtension_;
  };
  MarkerClusterer2.prototype.setImageExtension = function(imageExtension) {
    this.imageExtension_ = imageExtension;
  };
  MarkerClusterer2.prototype.getImagePath = function() {
    return this.imagePath_;
  };
  MarkerClusterer2.prototype.setImagePath = function(imagePath) {
    this.imagePath_ = imagePath;
  };
  MarkerClusterer2.prototype.getImageSizes = function() {
    return this.imageSizes_;
  };
  MarkerClusterer2.prototype.setImageSizes = function(imageSizes) {
    this.imageSizes_ = imageSizes;
  };
  MarkerClusterer2.prototype.getCalculator = function() {
    return this.calculator_;
  };
  MarkerClusterer2.prototype.setCalculator = function(calculator) {
    this.calculator_ = calculator;
  };
  MarkerClusterer2.prototype.getBatchSizeIE = function() {
    return this.batchSizeIE_;
  };
  MarkerClusterer2.prototype.setBatchSizeIE = function(batchSizeIE) {
    this.batchSizeIE_ = batchSizeIE;
  };
  MarkerClusterer2.prototype.getClusterClass = function() {
    return this.clusterClass_;
  };
  MarkerClusterer2.prototype.setClusterClass = function(clusterClass) {
    this.clusterClass_ = clusterClass;
  };
  MarkerClusterer2.prototype.getMarkers = function() {
    return this.markers_;
  };
  MarkerClusterer2.prototype.getTotalMarkers = function() {
    return this.markers_.length;
  };
  MarkerClusterer2.prototype.getClusters = function() {
    return this.clusters_;
  };
  MarkerClusterer2.prototype.getTotalClusters = function() {
    return this.clusters_.length;
  };
  MarkerClusterer2.prototype.addMarker = function(marker, nodraw) {
    this.pushMarkerTo_(marker);
    if (!nodraw) {
      this.redraw_();
    }
  };
  MarkerClusterer2.prototype.addMarkers = function(markers, nodraw) {
    for (var key in markers) {
      if (Object.prototype.hasOwnProperty.call(markers, key)) {
        this.pushMarkerTo_(markers[key]);
      }
    }
    if (!nodraw) {
      this.redraw_();
    }
  };
  MarkerClusterer2.prototype.pushMarkerTo_ = function(marker) {
    var _this = this;
    if (marker.getDraggable()) {
      google.maps.event.addListener(marker, "dragend", function() {
        if (_this.ready_) {
          marker.isAdded = false;
          _this.repaint();
        }
      });
    }
    marker.isAdded = false;
    this.markers_.push(marker);
  };
  MarkerClusterer2.prototype.removeMarker = function(marker, nodraw) {
    var removed = this.removeMarker_(marker);
    if (!nodraw && removed) {
      this.repaint();
    }
    return removed;
  };
  MarkerClusterer2.prototype.removeMarkers = function(markers, nodraw) {
    var removed = false;
    for (var i = 0; i < markers.length; i++) {
      var r = this.removeMarker_(markers[i]);
      removed = removed || r;
    }
    if (!nodraw && removed) {
      this.repaint();
    }
    return removed;
  };
  MarkerClusterer2.prototype.removeMarker_ = function(marker) {
    var index = -1;
    if (this.markers_.indexOf) {
      index = this.markers_.indexOf(marker);
    } else {
      for (var i = 0; i < this.markers_.length; i++) {
        if (marker === this.markers_[i]) {
          index = i;
          break;
        }
      }
    }
    if (index === -1) {
      return false;
    }
    marker.setMap(null);
    this.markers_.splice(index, 1);
    return true;
  };
  MarkerClusterer2.prototype.clearMarkers = function() {
    this.resetViewport_(true);
    this.markers_ = [];
  };
  MarkerClusterer2.prototype.repaint = function() {
    var oldClusters = this.clusters_.slice();
    this.clusters_ = [];
    this.resetViewport_(false);
    this.redraw_();
    setTimeout(function() {
      for (var i = 0; i < oldClusters.length; i++) {
        oldClusters[i].remove();
      }
    }, 0);
  };
  MarkerClusterer2.prototype.getExtendedBounds = function(bounds) {
    var projection = this.getProjection();
    var tr = new google.maps.LatLng(bounds.getNorthEast().lat(), bounds.getNorthEast().lng());
    var bl = new google.maps.LatLng(bounds.getSouthWest().lat(), bounds.getSouthWest().lng());
    var trPix = projection.fromLatLngToDivPixel(tr);
    trPix.x += this.gridSize_;
    trPix.y -= this.gridSize_;
    var blPix = projection.fromLatLngToDivPixel(bl);
    blPix.x -= this.gridSize_;
    blPix.y += this.gridSize_;
    var ne = projection.fromDivPixelToLatLng(trPix);
    var sw = projection.fromDivPixelToLatLng(blPix);
    bounds.extend(ne);
    bounds.extend(sw);
    return bounds;
  };
  MarkerClusterer2.prototype.redraw_ = function() {
    this.createClusters_(0);
  };
  MarkerClusterer2.prototype.resetViewport_ = function(hide) {
    for (var i = 0; i < this.clusters_.length; i++) {
      this.clusters_[i].remove();
    }
    this.clusters_ = [];
    for (var i = 0; i < this.markers_.length; i++) {
      var marker = this.markers_[i];
      marker.isAdded = false;
      if (hide) {
        marker.setMap(null);
      }
    }
  };
  MarkerClusterer2.prototype.distanceBetweenPoints_ = function(p1, p2) {
    var R = 6371;
    var dLat = (p2.lat() - p1.lat()) * Math.PI / 180;
    var dLon = (p2.lng() - p1.lng()) * Math.PI / 180;
    var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(p1.lat() * Math.PI / 180) * Math.cos(p2.lat() * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);
    var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    return R * c;
  };
  MarkerClusterer2.prototype.isMarkerInBounds_ = function(marker, bounds) {
    return bounds.contains(marker.getPosition());
  };
  MarkerClusterer2.prototype.addToClosestCluster_ = function(marker) {
    var distance = 4e4;
    var clusterToAddTo = null;
    for (var i = 0; i < this.clusters_.length; i++) {
      var cluster = this.clusters_[i];
      var center = cluster.getCenter();
      if (center) {
        var d = this.distanceBetweenPoints_(center, marker.getPosition());
        if (d < distance) {
          distance = d;
          clusterToAddTo = cluster;
        }
      }
    }
    if (clusterToAddTo && clusterToAddTo.isMarkerInClusterBounds(marker)) {
      clusterToAddTo.addMarker(marker);
    } else {
      var cluster = new Cluster(this);
      cluster.addMarker(marker);
      this.clusters_.push(cluster);
    }
  };
  MarkerClusterer2.prototype.createClusters_ = function(iFirst) {
    var _this = this;
    if (!this.ready_) {
      return;
    }
    if (iFirst === 0) {
      google.maps.event.trigger(this, "clusteringbegin", this);
      if (typeof this.timerRefStatic !== "undefined") {
        clearTimeout(this.timerRefStatic);
        delete this.timerRefStatic;
      }
    }
    var mapBounds = new google.maps.LatLngBounds(this.getMap().getBounds().getSouthWest(), this.getMap().getBounds().getNorthEast());
    var bounds = this.getExtendedBounds(mapBounds);
    var iLast = Math.min(iFirst + this.batchSize_, this.markers_.length);
    for (var i = iFirst; i < iLast; i++) {
      var marker = this.markers_[i];
      if (!marker.isAdded && this.isMarkerInBounds_(marker, bounds)) {
        if (!this.ignoreHidden_ || this.ignoreHidden_ && marker.getVisible()) {
          this.addToClosestCluster_(marker);
        }
      }
    }
    if (iLast < this.markers_.length) {
      this.timerRefStatic = window.setTimeout(function() {
        _this.createClusters_(iLast);
      }, 0);
    } else {
      delete this.timerRefStatic;
      google.maps.event.trigger(this, "clusteringend", this);
      for (var i = 0; i < this.clusters_.length; i++) {
        this.clusters_[i].updateIcon();
      }
    }
  };
  MarkerClusterer2.CALCULATOR = function(markers, numStyles) {
    var index = 0;
    var count = markers.length;
    var dv = count;
    while (dv !== 0) {
      dv = Math.floor(dv / 10);
      index++;
    }
    index = Math.min(index, numStyles);
    return {
      text: count.toString(),
      index,
      title: ""
    };
  };
  MarkerClusterer2.withDefaultStyle = function(overrides) {
    return __assign({ textColor: "black", textSize: 11, textDecoration: "none", textLineHeight: overrides.height, fontWeight: "bold", fontStyle: "normal", fontFamily: "Arial,sans-serif", backgroundPosition: "0 0" }, overrides);
  };
  MarkerClusterer2.BATCH_SIZE = 2e3;
  MarkerClusterer2.BATCH_SIZE_IE = 500;
  MarkerClusterer2.IMAGE_PATH = "../images/m";
  MarkerClusterer2.IMAGE_EXTENSION = "png";
  MarkerClusterer2.IMAGE_SIZES = [53, 56, 66, 78, 90];
  return MarkerClusterer2;
}(OverlayViewSafe);

// dep:@googlemaps_markerclustererplus
var googlemaps_markerclustererplus_default = MarkerClusterer;
export {
  googlemaps_markerclustererplus_default as default
};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
//# sourceMappingURL=@googlemaps_markerclustererplus.js.map
