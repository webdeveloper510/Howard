var _excluded = ["size", "color"];

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import { h } from 'vue';
import defaultAttributes from './defaultAttributes';
/**
 * Converts string to KebabCase
 * Copied from scripts/helper. If anyone knows how to properly import it here
 * then please fix it.
 *
 * @param {string} string
 * @returns {string} A kebabized string
 */

export var toKebabCase = function toKebabCase(string) {
  return string.replace(/([a-z0-9])([A-Z])/g, '$1-$2').toLowerCase();
};

var createVueComponent = function createVueComponent(iconName, iconNode) {
  return function (_ref, // props
  _ref2 // context
  ) {
    var size = _ref.size,
        color = _ref.color,
        props = _objectWithoutPropertiesLoose(_ref, _excluded);

    var attrs = _ref2.attrs,
        emit = _ref2.emit,
        slots = _ref2.slots;
    return h('svg', _extends({}, defaultAttributes, {
      width: size || defaultAttributes.width,
      height: size || defaultAttributes.height,
      stroke: color || defaultAttributes.stroke
    }, attrs, {
      "class": ['lucide', "lucide-" + toKebabCase(iconName), (attrs == null ? void 0 : attrs["class"]) || '']
    }, props), [].concat(iconNode.map(function (child) {
      return h.apply(void 0, child);
    }), slots["default"] ? [slots["default"]()] : []));
  };
};

export default createVueComponent;